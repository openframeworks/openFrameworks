ext {
    //var = 'signExample.keystore'
}// Top-level build file where you can add configuration options common to all sub-projects/modules.
buildscript {
    repositories {
        google()
        mavenCentral()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:8.9.0'
    }
}

allprojects {
    repositories {
        google()
        mavenCentral()
    }
    ext {

    }
}

evaluationDependsOn(':openFrameworksProject')

def ofMainRoot(){ return '../../../' }
final ofSource = ofMainRoot() + 'libs/openFrameworks'
final ofLibProject = ofMainRoot() + 'libs/openFrameworksCompiled/project/android'


task printPaths {
	doLast {
		println "üîç Checking Paths..."
		println "OF Source: ${file(ofSource).absolutePath}"
		println "OF Lib Output: ${file(ofLibProject).absolutePath}"
		println "Current Working Directory: ${projectDir.absolutePath}"
	}
}

task checkGradleDir {
	doLast {
		def gradleDir = file(ofLibProject).absoluteFile
		println "üîç Checking directory: ${gradleDir}"
		println "‚úÖ Exists? ${gradleDir.exists()}"
		println "üìÇ List contents: ${gradleDir.listFiles()}"
	}
}


task setupGradle {
	doLast {
		println "üîç Checking Gradle setup..."
		def gradleDir = file(ofLibProject).absoluteFile
		def gradleWrapper = new File(gradleDir, "gradlew")

		println "Directory: ${gradleDir}"
		if (!gradleWrapper.exists()) {
			println "Gradle wrapper not found! Initializing Gradle..."
			exec {
				workingDir gradleDir
				commandLine 'gradle', 'init'
			}
			exec {
				workingDir gradleDir
				commandLine 'gradle', 'wrapper'
			}
		} else {
			println "Gradle wrapper found: ${gradleWrapper.absolutePath}"
		}
	}
}

task buildOF {
	dependsOn setupGradle
	doLast {
		println "Building openFrameworks..."
		exec {
			workingDir file(ofLibProject)
			commandLine "./gradlew", "assembleDebug"
		}
	}
}

// Clean OpenFrameworks build
task cleanOF {
	dependsOn setupGradle
	doLast {
		println "Cleaning openFrameworks build..."
		exec {
			workingDir file(ofLibProject)
			commandLine "./gradlew", "clean"
		}
	}
}
