plugins {
	id 'com.android.application'
}

def CMAKELIST_PATH = './src/main/cpp'
def CPP_SOURCE = './src/main/cpp'
def JAVA_SOURCE = './src/main/java'
def PRJ_SRC_ROOT = './src/main'
def ofRoot(){ return '../../../../' }
final ofSource = ofRoot() + 'libs/openFrameworks'
final ofLibs = ofRoot() + 'libs'
final addons = ofRoot() + 'addons'
final ofLibOutput = ofRoot() + 'libs/openFrameworksCompiled/lib/android'
def OFX_ANDROID = ofRoot() + 'addons/ofxAndroid'
//def OF_ADDONS_ARGUMENTS = "${OF_ADDONS}"
def enableProguardInReleaseBuilds = true
def enableProguardInDebugBuilds = false

task wrapper(type: Wrapper) {
	gradleVersion = '8.9.0'
}
tasks.register("prepareKotlinBuildScriptModel"){
}

def projectRoot = rootProject.projectDir.absolutePath
def addonFile = new File(projectRoot, "addons.make")

// Get all addon paths from addons.make
def addonPaths = []
if (addonFile.exists()) {
	addonFile.eachLine { line ->
		def addonPath = ofRoot + "addons/" + line
		if (new File(addonPath).exists()) {
			addonPaths.add(addonPath)
		}
	}
}

def addonIncludeDirs = []
def addonLibs = []

// Collect include directories and libraries for each addon
addonPaths.each { addon ->
	def includePath = new File(addon, "src")
	if (includePath.exists()) {
		addonIncludeDirs.add(includePath.absolutePath)
	}
}

// Define supported Android ABIs
def supportedAbis = ["arm64-v8a", "armeabi-v7a", "x86_64"]

addonPaths.each { addon ->
	supportedAbis.each { abi ->
		def libPath = new File(addon, "libs/android/${abi}")
		if (libPath.exists()) {
			def libFiles = libPath.listFiles()?.findAll { it.name.endsWith(".so") || it.name.endsWith(".a") }
			if (libFiles) {
				addonLibs.addAll(libFiles*.absolutePath)
			}
		}
	}
}
println "Addon Libraries found: ${addonLibs}"

// Convert lists to CMake arguments
def cmakeIncludeArgs = "-DADDON_INCLUDE_DIRS=" + addonIncludeDirs.join(";")
def cmakeLibArgs = "-DADDON_LIBS=" + addonLibs.join(";")

println "Found addons: " + addonPaths
println "Include directories: " + addonIncludeDirs
println "Libraries: " + addonLibs

evaluationDependsOn(':openFrameworksProject')

tasks.whenTaskAdded { task ->
	if (task.name == 'assemble') {
		task.dependsOn(':openFrameworksProject:assemble')
	}
}

android {
	compileSdkVersion 34
	buildToolsVersion '35.0.0'
	//ndkPath "/Users/x/android-ndk-r21e"  // Point to your own NDK if needed
	ndkVersion '28.0.13004108' // use android studio side loaded ndk
	buildFeatures {
		prefab true
	}
	signingConfigs {
		debug {
		}
		release {
			storeFile new File("${System.properties['user.home']}/.android/debug.keystore")
			storeType "jks"
			keyAlias 'androiddebugkey'
//			storePassword 'android' // <- UPDATE THIS
//          keyPassword 'android'   // <- UPDATE THIS
		}
	}
	defaultConfig {
		applicationId "cc.openframeworks.emptyExample"  // IMPORTANT : THIS DEFINES THE ID OF THE APK
		minSdkVersion 24
		targetSdkVersion 34
		versionCode 12
		versionName '12.0'
		ndk.abiFilters 'armeabi-v7a', 'arm64-v8a', 'x86_64'

		externalNativeBuild {
			cmake {
				arguments "-DANDROID_STL=c++_shared",
					"-DANDROID_ARM_NEON=TRUE",
					"-DANDROID_TOOLCHAIN=clang",
					cmakeIncludeArgs, // Include paths
					cmakeLibArgs      // Library paths
				"-DTARGET_OPENGLES=TRUE"

				version '3.22.1'
			}
		}
		multiDexEnabled false
	}
	buildTypes {
		release {
			signingConfig signingConfigs.release
			jniDebuggable false
			debuggable false
			minifyEnabled false
			shrinkResources false
			proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
			signingConfig signingConfigs.release
		}
		debug {
			jniDebuggable true
			debuggable true
			minifyEnabled false
			shrinkResources false
			signingConfig signingConfigs.debug
		}
	}
	flavorDimensions "version"
	productFlavors {
		playstore {
			applicationIdSuffix ""
			signingConfig signingConfigs.release
		}
//        humble {
//            applicationIdSuffix ".humble"
//        }
//        amazon {
//            applicationIdSuffix ".amazon"
//        }
//        samsung {
//            applicationIdSuffix ".samsung"
//        }
//        oppo {
//            applicationIdSuffix ".oppo"
//        }
	}
	sourceSets {
		main {
			manifest.srcFile "${PRJ_SRC_ROOT}/AndroidManifest.xml"
			java.srcDirs = ["${PRJ_SRC_ROOT}/java",
							"${OFX_ANDROID}/Java"]
			res.srcDirs = ["${PRJ_SRC_ROOT}/res"]
			assets {
				srcDirs 'src/main/assets', 'src/main/bin/data'
			}
		}
	}
	externalNativeBuild {
		cmake {
			path "${CMAKELIST_PATH}/CMakeLists.txt"
		}

	}
	compileOptions {
		sourceCompatibility JavaVersion.VERSION_1_8
		targetCompatibility JavaVersion.VERSION_1_8
	}
	androidResources {
		noCompress ''
	}
	dependenciesInfo {
		includeInApk false
		includeInBundle false
	}
	namespace 'cc.openframeworks.android'
//    testOptions {
//        devices {
//            pixel2api29 (com.android.build.api.dsl.ManagedVirtualDevice) {
//                // Use device profiles you typically see in
//                // Android Studio
//                device = "Pixel 2"
//                apiLevel = 29
//                // You can also specify "aosp" if you donâ€™t require
//                // Google Play Services.
//                systemImageSource = "google"
//                abi = "x86"
//            }
//        }
//    }
}


dependencies {
	implementation fileTree(dir: 'libs', include: ['*.jar'])
	implementation 'androidx.appcompat:appcompat:1.7.0'
	implementation 'androidx.constraintlayout:constraintlayout:2.2.1'
	implementation 'androidx.legacy:legacy-support-v4:1.0.0'
	implementation "com.getkeepsafe.relinker:relinker:1.4.5"
	implementation 'com.google.android.material:material:1.12.0'
	if (project.hasProperty("googleplay")) {
		implementation "com.google.android.gms:play-services-games:22.0.1"
		implementation "com.google.android.gms:play-services-auth:20.0.1"
		implementation "com.google.android.gms:play-services-base:18.0.1"
		implementation "com.google.android.gms:play-services-basement:18.0.0"
		implementation "com.google.android.gms:play-services-instantapps:18.0.1"
		implementation "com.google.android.gms:play-services-appset:16.0.2"
	}
}

