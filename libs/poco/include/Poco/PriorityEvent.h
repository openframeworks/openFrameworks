//
// PriorityEvent.h
//
// $Id: //poco/1.4/Foundation/include/Poco/PriorityEvent.h#2 $
//
// Library: Foundation
// Package: Events
// Module:  PriorityEvent
//
// Implementation of the PriorityEvent template.
//
// Copyright (c) 2006-2011, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//


#ifndef Foundation_PriorityEvent_INCLUDED
#define Foundation_PriorityEvent_INCLUDED


#include "Poco/AbstractEvent.h"
#include "Poco/PriorityStrategy.h"
#include "Poco/AbstractPriorityDelegate.h"


namespace Poco {


template <class TArgs, class TMutex = FastMutex> 
class PriorityEvent: public AbstractEvent < 
	TArgs,
	PriorityStrategy<TArgs, AbstractPriorityDelegate<TArgs> >,
	AbstractPriorityDelegate<TArgs>,
	TMutex
>
	/// A PriorityEvent uses internally a PriorityStrategy which 
	/// invokes delegates in order of priority (lower priorities first).
	/// PriorityEvent's can only be used together with PriorityDelegate's.
	/// PriorityDelegate's are sorted according to the priority value, when
	/// two delegates have the same priority, they are invoked in
	/// an arbitrary manner.
{
public:
	PriorityEvent()
	{
	}

	~PriorityEvent()
	{
	}

private:
	PriorityEvent(const PriorityEvent&);
	PriorityEvent& operator = (const PriorityEvent&);
};


} // namespace Poco


#endif // Foundation_PriorityEvent_INCLUDED
