COMPILER_OPTIMIZATION = $(ANDROID_COMPILER_OPTIMIZATION)

NDK_PLATFORM = android-14
SDK_TARGET = android-17
GCC_VERSION = 4.6

ifeq ($(findstring Release_arm7,$(MAKECMDGOALS)),Release_arm7)
	LIBSPATH = android/armeabi-v7a
	ABI = armeabi-v7a
else
    ifeq ($(MAKECMDGOALS),Release_neonAndroid)
        LIBSPATH = android/armeabi-v7a
    	ABI = armeabi-v7a
    else
    	ifeq ($(MAKECMDGOALS),Debug)
	        LIBSPATH = android/armeabi-v7a
	    	ABI = armeabi-v7a
    	else
	    	LIBSPATH = android/armeabi
		    ABI = armeabi
		endif
    endif
endif

PROJECT_PATH=$(PWD)

TOOLCHAIN=arm-linux-androideabi-$(GCC_VERSION)
TOOLCHAIN_PATH=$(NDK_ROOT)/toolchains/$(TOOLCHAIN)/prebuilt/$(HOST_PLATFORM)/bin/
ANDROID_PREFIX=arm-linux-androideabi-
CC=$(NDK_ROOT)/toolchains/$(TOOLCHAIN)/prebuilt/$(HOST_PLATFORM)/bin/$(ANDROID_PREFIX)gcc
CXX=$(NDK_ROOT)/toolchains/$(TOOLCHAIN)/prebuilt/$(HOST_PLATFORM)/bin/$(ANDROID_PREFIX)g++
AR=$(NDK_ROOT)/toolchains/$(TOOLCHAIN)/prebuilt/$(HOST_PLATFORM)/bin/$(ANDROID_PREFIX)ar
SYSROOT=$(NDK_ROOT)/platforms/$(NDK_PLATFORM)/arch-arm/
CFLAGS += -nostdlib --sysroot=$(SYSROOT) -fno-short-enums
CFLAGS += -I"$(NDK_ROOT)/platforms/$(NDK_PLATFORM)/arch-arm/usr/include/" -I"$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/include" -I"$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(GCC_VERSION)/include" -I"$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/$(ABI)/include" -I"$(NDK_ROOT)/sources/crystax/include/" -I"$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(GCC_VERSION)/libs/$(ABI)/include"
CFLAGS += -DANDROID

INCLUDES_FLAGS += -I$(OF_ROOT)/libs/glu/include_android


LDFLAGS = --sysroot=$(SYSROOT) -nostdlib -L"$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(GCC_VERSION)/libs/$(ABI)"
ifeq ($(HOST_PLATFORM),linux-x86)
	LDFLAGS += -fuse-ld=gold
endif
SYSTEMLIBS +=  -lsupc++ -lz -lGLESv1_CM -llog -ldl -lm -lc $(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/$(GCC_VERSION)/libs/$(ABI)/libgnustl_static.a -lgcc
LIB_STATIC += $(OF_ROOT)/libs/poco/lib/$(LIBSPATH)/libPocoNet.a $(OF_ROOT)/libs/poco/lib/$(LIBSPATH)/libPocoXML.a $(OF_ROOT)/libs/poco/lib/$(LIBSPATH)/libPocoFoundation.a
#LIB_STATIC += $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libsndfile.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libcommon.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libgsm.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libg72x.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libFLAC.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libreplaygain_synthesis.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libreplaygain_analysis.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libgrabbag.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libgrabbag.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libgetopt.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libutf8.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libvorbis.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libvorbisfile.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libvorbisenc.a $(OF_ROOT)/libs/libsndfile/lib/$(LIBSPATH)/libogg.a

DATA_FILES = $(shell find bin/data -type f)

ifeq ($(findstring Debug,$(MAKECMDGOALS)),Debug)
	TARGET_NAME = Debug
	TARGET = libs/armeabi-v7a/libOFAndroidApp.so
	TARGET_CFLAGS += -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16
	LDFLAGS += -Wl,--fix-cortex-a8 -shared -Wl,--no-undefined
	USER_LIBS = $(USER_LIBS_ARM)
endif

ifeq ($(findstring Release,$(MAKECMDGOALS)),Release)
	TARGET_NAME = Release
	TARGET = libs/armeabi/libOFAndroidApp.so
	LDFLAGS += -Wl,--fix-cortex-a8 -shared -Wl,--no-undefined
	USER_LIBS = $(USER_LIBS_ARM)
endif

ifeq ($(findstring Release_arm7,$(MAKECMDGOALS)),Release_arm7)
	TARGET_NAME = Release_arm7
	TARGET_CFLAGS += -march=armv7-a -mfloat-abi=softfp -mfpu=vfpv3-d16 -mthumb
	TARGET = libs/armeabi-v7a/libOFAndroidApp.so
	LDFLAGS += -Wl,--fix-cortex-a8 -shared -Wl,--no-undefined
	USER_LIBS = $(USER_LIBS_ARM7)
endif

ifeq ($(findstring Release_neon,$(MAKECMDGOALS)),Release_neon)
	TARGET_NAME = Release_neon
	TARGET_CFLAGS += -march=armv7-a -mfloat-abi=softfp -mfpu=neon
	TARGET = libs/armeabi-v7a/libOFAndroidApp_neon.so
	LDFLAGS += -Wl,--fix-cortex-a8 -shared -Wl,--no-undefined
	USER_LIBS = $(USER_LIBS_NEON)
	TARGET_LIBS = $(OF_ROOT)/libs/openFrameworksCompiled/lib/android/armeabi-neon/libopenFrameworks.a
endif

ifeq ($(MAKECMDGOALS),AndroidInstall)
	TARGET_NAME = Install
endif

ifeq ($(APPNAME),)
    APPNAME = $(shell basename `pwd`)
endif
RESNAME=$(shell echo $(APPNAME)Resources | tr '[A-Z]' '[a-z]')
RESFILE=res/raw/$(RESNAME).zip


ifeq ($(PKGNAME),)
    PKGNAME = cc.openframeworks.$(APPNAME)
endif

DebugAndroid: $(TARGET) afterDebugAndroid

ReleaseAndroid: $(TARGET)

Release_arm7Android: $(TARGET)

Release_neonAndroid: $(TARGET) 

TestLinkAndroid: $(TARGET) afterDebugAndroid

AndroidDebug:
	$(MAKE) DebugAndroid

AndroidRelease:
	@if [ "$(findstring armv5,$(ANDROID_BUILD_ARCHS_RELEASE))" = "armv5" ]; then \
		echo making release armv5; \
		$(MAKE) ReleaseAndroid; \
	fi
	
	@if [ "$(findstring armv7,$(ANDROID_BUILD_ARCHS_RELEASE))" = "armv7" ]; then \
		echo making release armv7; \
		$(MAKE) Release_arm7Android; \
	fi
	
	@if [ "$(findstring neon,$(ANDROID_BUILD_ARCHS_RELEASE))" = "neon" ]; then \
		echo making release neon; \
		$(MAKE) Release_neonAndroid; \
	fi
	
	$(MAKE) afterReleaseAndroid
	
.PHONY:  afterDebugAndroid afterReleaseAndroid CleanAndroid


CleanAndroid:
	rm -Rf obj
	rm -f libs/armeabi-v7a/libOFAndroidApp.so
	rm -f libs/armeabi/libOFAndroidApp.so
	
	
afterDebugAndroid: $(RESFILE)
	@if [ -d libs/armeabi ]; then rm -r libs/armeabi; fi
	@if [ -f obj/$(BIN_NAME) ]; then rm obj/$(BIN_NAME); fi
	
	@echo copying debugging binaries
	@cp $(NDK_ROOT)/prebuilt/android-arm/gdbserver/gdbserver libs/armeabi-v7a/
	
	@echo create gdb.setup for armeabi-v7a
	@echo "set solib-search-path $(PWD)/obj/local/armeabi-v7a:$(PWD)/libs/armeabi-v7a" > libs/armeabi-v7a/gdb.setup
	@echo "directory $(NDK_ROOT)/platforms/$(NDK_PLATFORM)/arch-arm/usr/include" >> libs/armeabi-v7a/gdb.setup
	@echo "directory $(PWD)/src" >> libs/armeabi-v7a/gdb.setup
	@echo "directory $(NDK_ROOT)/sources/cxx-stl/system" >> libs/armeabi-v7a/gdb.setup
	@echo "directory $(PWD)/libs/armeabi-v7a" >> libs/armeabi-v7a/gdb.setup 
	@echo "" >> libs/armeabi-v7a/gdb.setup 
	
	@echo creating Android.mk and Application.mk
	@if [ ! -d jni ]; then mkdir jni; fi
	@echo "APP_ABI := armeabi-v7a" > jni/Application.mk
	@echo "#LOCAL_MODULE := OFAndroidApp" > jni/Android.mk
	
	
	@echo compressing and copying resources from bin/data into res
	@cd $(PROJECT_PATH); \
	if [ -d "bin/data" ]; then \
		mkdir -p res/raw; \
		rm res/raw/$(RESNAME).zip; \
		cd bin/data; \
		zip -r ../../res/raw/$(RESNAME).zip *; \
		cd ../..; \
	fi
	
	#@echo updating ofAndroidLib project
	#@cd $(OF_ROOT)/addons/ofxAndroid/ofAndroidLib; \
	#if [ "$(HOST_PLATFORM)" = "windows" ]; then \
	#	cmd //c $(SDK_ROOT)/tools/android.bat update project --target $(SDK_TARGET) --path .; \
	#else \
	#	$(SDK_ROOT)/tools/android update project --target $(SDK_TARGET) --path .; \
	#fi
	
	#@echo updating current project
	#@cd $(PROJECT_PATH); \
	#if [ "$(HOST_PLATFORM)" = "windows" ]; then \
	#	cmd //c $(SDK_ROOT)/tools/android.bat update project --target $(SDK_TARGET) --path .; \
	#else \
	#	$(SDK_ROOT)/tools/android update project --target $(SDK_TARGET) --path .; \
	#fi

afterReleaseAndroid: $(RESFILE)
	@if [ -f obj/$(BIN_NAME) ]; then rm obj/$(BIN_NAME); fi
	
	@echo copying debugging binaries
	@if [ "$(findstring neon,$(ANDROID_BUILD_ARCHS_RELEASE))" = "neon" ]; then \
		cp $(OF_ROOT)/libs/openFrameworksCompiled/project/android/libneondetection.so libs/armeabi-v7a/; \
	fi
	
	@if [ "$(findstring armv5,$(ANDROID_BUILD_ARCHS_RELEASE))" = "armv5" ]; then \
		cp $(NDK_ROOT)/prebuilt/android-arm/gdbserver/gdbserver libs/armeabi; \
	fi
	
	@if [ "$(findstring armv7,$(ANDROID_BUILD_ARCHS_RELEASE))" = "armv7" ]; then \
		cp $(NDK_ROOT)/prebuilt/android-arm/gdbserver/gdbserver libs/armeabi-v7a; \
	fi
	
	@if [ "$(findstring neon,$(ANDROID_BUILD_ARCHS_RELEASE))" = "neon" ]; then \
		cp $(NDK_ROOT)/prebuilt/android-arm/gdbserver/gdbserver libs/armeabi-v7a; \
	fi
	
	@if [ "$(findstring armv5,$(ANDROID_BUILD_ARCHS_RELEASE))" = "armv5" ]; then \
		echo create gdb.setup for armeabi; \
		echo "set solib-search-path $(PWD)/obj/local/armeabi:$(PWD)/libs/armeabi" > libs/armeabi/gdb.setup; \
		echo "directory $(NDK_ROOT)/platforms/$(NDK_PLATFORM)/arch-arm/usr/include" >> libs/armeabi/gdb.setup; \
		echo "directory $(PWD)/src" >> libs/armeabi/gdb.setup; \
		echo "directory $(NDK_ROOT)/sources/cxx-stl/system" >> libs/armeabi/gdb.setup; \
		echo "directory $(PWD)/libs/armeabi" >> libs/armeabi/gdb.setup; \
		echo "" >> libs/armeabi/gdb.setup; \
	fi
	
	@if [ "$(findstring armv7,$(ANDROID_BUILD_ARCHS_RELEASE))" = "armv7" ]; then \
		echo create gdb.setup for armeabi-v7a; \
		echo "set solib-search-path $(PWD)/obj/local/armeabi-v7a:$(PWD)/libs/armeabi-v7a" > libs/armeabi-v7a/gdb.setup; \
		echo "directory $(NDK_ROOT)/platforms/$(NDK_PLATFORM)/arch-arm/usr/include" >> libs/armeabi-v7a/gdb.setup; \
		echo "directory $(PWD)/src" >> libs/armeabi-v7a/gdb.setup; \
		echo "directory $(NDK_ROOT)/sources/cxx-stl/system" >> libs/armeabi-v7a/gdb.setup; \
		echo "directory $(PWD)/libs/armeabi-v7a" >> libs/armeabi-v7a/gdb.setup ; \
		echo "" >> libs/armeabi-v7a/gdb.setup; \
	fi
	
	@echo creating Android.mk and Application.mk
	@if [ ! -d jni ]; then mkdir jni; fi
	@if [ "$(findstring armv5,$(ANDROID_BUILD_ARCHS_RELEASE))" = "armv5" ]; then \
		if [ "$(findstring armv7,$(ANDROID_BUILD_ARCHS_RELEASE))" = "armv7" ]; then \
			echo "APP_ABI := armeabi armeabi-v7a" > jni/Application.mk; \
		else \
			if [ "$(findstring neon,$(ANDROID_BUILD_ARCHS_RELEASE))" = "neon" ]; then \
				echo "APP_ABI := armeabi armeabi-v7a" > jni/Application.mk; \
			else \
				echo "APP_ABI := armeabi-v7a" > jni/Application.mk; \
			fi; \
		fi; \
	else \
		if [ "$(findstring armv7,$(ANDROID_BUILD_ARCHS_RELEASE))" = "armv7" ]; then \
			echo "APP_ABI := armeabi-v7a" > jni/Application.mk; \
		else \
			if [ "$(findstring neon,$(ANDROID_BUILD_ARCHS_RELEASE))" = "neon" ]; then \
				echo "APP_ABI := armeabi-v7a" > jni/Application.mk; \
			else \
				echo "APP_ABI := armeabi armeabi-v7a" > jni/Application.mk; \
			fi; \
		fi; \
	fi; \
	echo "#LOCAL_MODULE := OFAndroidApp" > jni/Android.mk
	
	#@echo updating ofAndroidLib project
	#@cd $(OF_ROOT)/addons/ofxAndroid/ofAndroidLib; \
	#if [ "$(HOST_PLATFORM)" = "windows" ]; then \
	#	cmd //c $(SDK_ROOT)/tools/android.bat update project --target $(SDK_TARGET) --path .; \
	#else \
	#	$(SDK_ROOT)/tools/android update project --target $(SDK_TARGET) --path .; \
	#fi
	
	#@echo updating current project
	#@cd $(PROJECT_PATH); \
	#if [ "$(HOST_PLATFORM)" = "windows" ]; then \
	#	cmd //c $(SDK_ROOT)/tools/android.bat update project --target $(SDK_TARGET) --path .; \
	#else \
	#	$(SDK_ROOT)/tools/android update project --target $(SDK_TARGET) --path .; \
	#fi
	
$(RESFILE): $(DATA_FILES)
	@echo compressing and copying resources from bin/data into res
	cd $(PROJECT_PATH); \
	if [ -d "bin/data" ]; then \
		mkdir -p res/raw; \
		rm res/raw/$(RESNAME).zip; \
		cd bin/data; \
		zip -r ../../res/raw/$(RESNAME).zip *; \
		cd ../..; \
	fi


AndroidInstall:	
	cd $(OF_ROOT)/addons/ofxAndroid/ofAndroidLib; \
	echo installing on $(HOST_PLATFORM); \
	if [ "$(HOST_PLATFORM)" = "windows" ]; then \
	cmd //c $(SDK_ROOT)/tools/android.bat update project --target $(SDK_TARGET) --path .; \
	else \
	$(SDK_ROOT)/tools/android update project --target $(SDK_TARGET) --path .; \
	fi 
	cd $(PROJECT_PATH); \
	if [ -d "bin/data" ]; then \
		mkdir -p res/raw; \
		rm res/raw/$(RESNAME).zip; \
		cd bin/data; \
		zip -r ../../res/raw/$(RESNAME).zip *; \
		cd ../..; \
	fi 
	if [ -f obj/$(BIN_NAME) ]; then rm obj/$(BIN_NAME); fi
	#touch AndroidManifest.xml
	if [ "$(HOST_PLATFORM)" = "windows" ]; then \
	cmd //c $(SDK_ROOT)/tools/android.bat update project --target $(SDK_TARGET) --path .; \
	else \
	$(SDK_ROOT)/tools/android update project --target $(SDK_TARGET) --path .; \
	fi
	
	#rm -r $(addprefix bin/,$(shell ls bin/ | grep -v ^data$))
	
	if [ "$(HOST_PLATFORM)" = "windows" ]; then \
	#$(ANT_BIN)/ant clean; \
	$(ANT_BIN)/ant debug install; \
	else \
	#ant clean; \
	ant debug install; \
	fi
	cp bin/OFActivity-debug.apk bin/$(APPNAME).apk
	#if [ "$(shell $(SDK_ROOT)/platform-tools/adb get-state)" = "device" ]; then
	#$(SDK_ROOT)/platform-tools/adb uninstall $(PKGNAME)
	$(SDK_ROOT)/platform-tools/adb install -r bin/$(APPNAME).apk;
	#fi
	$(SDK_ROOT)/platform-tools/adb shell am start -a android.intent.action.MAIN -n $(PKGNAME)/$(PKGNAME).OFActivity
	
