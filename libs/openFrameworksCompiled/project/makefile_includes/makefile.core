##########################################################################################
# CORE SPACE SPACE
##########################################################################################

# setup the shell
SHELL = /bin/sh

# define the location of the core path
OF_CORE_SRC_PATH=$(OF_LIBS_PATH)/openFrameworks/
OF_CORE_LIB_PATH=$(OF_LIBS_PATH)/openFrameworksCompiled/$(PLATFORM_LIB_SUBPATH)

##########################################################################################
# SOURCE FILES
##########################################################################################

# take from the platform core exclusions
CORE_SOURCE_EXCLUSIONS=$(PLATFORM_CORE_SOURCE_EXCLUSIONS)
# add more here if needed ...
#CORE_SOURCE_EXCLUSIONS+=

# strip and collapse spaces, and add the % suffix to allow directory wildcard matching
FULLY_QUALIFIED_CORE_SOURCE_EXCLUSIONS=$(addprefix $(OF_CORE_SRC_PATH),$(addsuffix %,$(strip $(CORE_SOURCE_EXCLUSIONS))))

# find all of the source directories, exclude all . (dot-hidden) files/folders
ALL_CORE_SOURCE_PATHS=$(shell find $(OF_CORE_SRC_PATH) -maxdepth 1 -mindepth 1 -type d \( ! -name ".*" \) )

# print debug information if needed
ifdef MAKEFILE_DEBUG
    $(info --ALL_CORE_SOURCE_PATHS-- )
    $(foreach v, $(ALL_CORE_SOURCE_PATHS),$(info $(v)))
    $(info -------- )
endif

# filter out all excluded files / folders that were defined above
# this list will be searched for cpp files below and will eventually
# be included as locations for header searches via 
FILTERED_CORE_SOURCE_PATHS=$(filter-out $(FULLY_QUALIFIED_CORE_SOURCE_EXCLUSIONS),$(ALL_CORE_SOURCE_PATHS))

# print debug information if needed
ifdef MAKEFILE_DEBUG
    $(info --FILTERED_CORE_SOURCE_PATHS-- )
    $(foreach v, $(FILTERED_CORE_SOURCE_PATHS),$(info $(v)))
    $(info -------- )
endif

# search the directories in the source folders for all .cpp files
ALL_CORE_SOURCES_FROM_FILTERED_SOURCE_PATHS=$(shell find $(FILTERED_CORE_SOURCE_PATHS) -name "*.cpp")

# filter out all excluded files / folders that were defined above
SOURCES=$(filter-out $(FULLY_QUALIFIED_CORE_SOURCE_EXCLUSIONS),$(ALL_CORE_SOURCES_FROM_FILTERED_SOURCE_PATHS))

# print debug information if needed
ifdef MAKEFILE_DEBUG
    $(info --SOURCES TO COMPILE-- )
    $(foreach v, $(SOURCES),$(info $(v)))
    $(info -------- )
endif

##TODO: add platform inclusions here


##########################################################################################
# INCLUDES
##########################################################################################

# create our core include paths from the source directory paths, 
# these have already been filtered and processed according to rules.
# plus the root so that we don't miss the ofMain.h.
CORE_HEADER_PATHS=$(OF_LIBS_CORE_PATH) $(FILTERED_CORE_SOURCE_PATHS) 


# add folders or single files to exclude fromt he compiled lib
UNFILTERED_THIRDPARTY_HEADER_PATHS = $(shell find $(OF_LIBS_PATH)/*/include -type d \( ! -name ".*" \))

ifdef MAKEFILE_DEBUG
    $(info --UNFILTERED_THIRDPARTY_HEADER_PATHS-- )
    $(foreach v, $(UNFILTERED_THIRDPARTY_HEADER_PATHS),$(info $(v)))
    $(info -------- )
endif

THIRDPARTY_HEADER_EXCLUSIONS=$(PLATFORM_THIRDPARTY_HEADER_EXCLUSIONS)
# add more here?

# strip and collapse spaces, and add the % suffix to allow directory matching
CLEANED_THIRDPARTY_HEADER_EXCLUSIONS=$(addprefix $(OF_LIBS_PATH),$(addsuffix %,$(strip $(THIRDPARTY_HEADER_EXCLUSIONS))))

ifdef MAKEFILE_DEBUG
    $(info --CLEANED_THIRDPARTY_HEADER_EXCLUSIONS-- )
    $(foreach v, $(CLEANED_THIRDPARTY_HEADER_EXCLUSIONS),$(info $(v)))
    $(info -------- )
endif

# filter out all excluded files / folders that were defined above
THIRDPARTY_HEADER_PATHS=$(filter-out $(CLEANED_THIRDPARTY_HEADER_EXCLUSIONS),$(UNFILTERED_THIRDPARTY_HEADER_PATHS))

ALL_HEADER_PATHS= $(PLATFORM_HEADER_SEARCH_PATHS) $(THIRDPARTY_HEADER_PATHS) $(CORE_HEADER_PATHS)

INCLUDES_CFLAGS =$(addprefix -I,$(ALL_HEADER_PATHS)) 

# print debug information if needed
ifdef MAKEFILE_DEBUG
    $(info --INCLUDES_CFLAGS-- )
    $(foreach v, $(INCLUDES_CFLAGS),$(info $(v)))
    $(info -------- )
endif

# ADD THE INCLUDES TO THE CFLAGS
##########################################################################################
# DEFINES
##########################################################################################

# this is the space delimited list of defines
ALL_DEFINES=
ALL_DEFINES+=$(USER_DEFINES) 
ALL_DEFINES+=$(PLATFORM_DEFINES)

# this is the list of flags with -DDEFINE_NAME
DEFINES=$(addprefix -D,$(ALL_DEFINES))

# print debug information if needed
ifdef MAKEFILE_DEBUG
    $(info --DEFINES-- )
    $(foreach v, $(DEFINES),$(info $(v)))
    $(info -------- )
endif


##########################################################################################
# CFLAGS
##########################################################################################

CFLAGS=
# add the defines
CFLAGS+=$(DEFINES) 
# add the core flags
CFLAGS+=-Wall -fexceptions 
# add the include cflags
CFLAGS+=$(INCLUDES_CFLAGS) 


$(info OBJ=OUTPUT_PATH=$(OBJ_OUTPUT_PATH))


##########################################################################################
# COMPILER OPTIMIZATIONS and TARGET MAKING
##########################################################################################

ifeq ($(findstring Debug,$(MAKECMDGOALS)),Debug)
	OPTIMIZATION_CFLAGS = $(PLATFORM_OPTIMIZATION_CFLAGS_REQUIRED) $(PLATFORM_OPTIMIZATION_CFLAGS_DEBUG)-g3
	TARGET_NAME = $(MAKECMDGOALS)
	TARGET = $(OF_CORE_LIB_PATH)/libopenFrameworksDebug.a
else ifeq ($(findstring Release,$(MAKECMDGOALS)),Release)
	OPTIMIZATION_CFLAGS = $(PLATFORM_OPTIMIZATION_CFLAGS_REQUIRED) $(PLATFORM_OPTIMIZATION_CFLAGS_RELEASE) 
	TARGET_NAME = $(MAKECMDGOALS)
	TARGET = $(OF_CORE_LIB_PATH)/libopenFrameworks.a
else 
	# default to release
	OPTIMIZATION_CFLAGS = $(PLATFORM_OPTIMIZATION_CFLAGS_REQUIRED) $(PLATFORM_OPTIMIZATION_CFLAGS_RELEASE)
	TARGET_NAME = Release
	TARGET = $(OF_CORE_LIB_PATH)/libopenFrameworks.a
endif

ifeq ($(MAKECMDGOALS),clean)
	TARGET=$(OF_CORE_LIB_PATH)/libopenFrameworks.a
	TARGET+= $(OF_CORE_LIB_PATH)/libopenFrameworksDebug.a
endif

CLEANTARGET = $(addprefix Clean,$(TARGET_NAME))

##########################################################################################
# OBJECT FILES
##########################################################################################
OBJFILES = $(patsubst ../../../%.cpp,%.o,$(SOURCES))

OBJ_OUTPUT_PATH = obj/$(TARGET_NAME)/
#DEPFILES = $(addprefix $(OBJ_OUTPUT),$(patsubst $(OF_LIBS_PATH)/%.cpp,%.d,$(SOURCES)))
DEPFILES = $(addprefix $(OBJ_OUTPUT_PATH),$(patsubst ../../../%.cpp,%.d,$(SOURCES)))
OBJS = $(addprefix $(OBJ_OUTPUT_PATH), $(OBJFILES))

##########################################################################################
##########################################################################################

.PHONY: all Debug Release after clean CleanDebug CleanRelease help

Release: $(TARGET) 

Debug: $(TARGET) 

all: 
	$(MAKE) Debug
	$(MAKE) Release
	
#This rule does the compilation
$(OBJ_OUTPUT_PATH)%.o: ../../../%.cpp 
	@echo "compiling object for " $<
	mkdir -p $(@D)
	$(CXX) $(OPTIMIZATION_CFLAGS) $(CFLAGS) -MMD -MP -MF$(OBJ_OUTPUT_PATH)$*.d -MT$(OBJ_OUTPUT_PATH)$*.o -o $@ -c $<

$(TARGET) : $(OBJS) 
	echo "creating " $(TARGET)
	mkdir -p $(@D)
	$(AR) -r "$@" $(OBJS)

-include $(DEPFILES)

#.PHONY: clean CleanDebug CleanRelease
clean:
	rm -Rf obj
	rm -f -v $(TARGET)
	
$(CLEANTARGET):
	rm -Rf -v $(OBJ_OUTPUT_PATH)
	rm -f -v $(TARGET)
	
#.PHONY: help
help:
	@echo 
	@echo openFrameworks compiled library makefile
	@echo
	@echo targets:
	@echo "make Debug:		builds the library with debug symbols"
	@echo "make Release:		builds the library with optimizations"
	@echo "make:			= make Release"
	@echo "make all:		= make Debug + make Release"
	@echo "make CleanDebug: cleans the Debug target"
	@echo "make CleanRelease:	cleans the Release target"
	@echo "make clean:		cleans everything"
	@echo

